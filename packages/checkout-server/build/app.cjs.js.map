{"version":3,"file":"app.cjs.js","sources":["../src/routes/fallback.js","../src/routes/braintree/gateway.js","../src/routes/braintree/checkout.js","../src/routes/braintree/client-token.js","../src/routes/braintree/routes.js","../src/routes/index.js","../src/middleware/cors.js","../src/middleware/body-parser.js","../src/middleware/auth.js","../src/middleware/secure.js","../src/middleware/response-headers.js","../src/middleware/index.js","../src/app.js"],"sourcesContent":["// @flow\nimport express from 'express';\nimport type { Router, $Request, $Response } from 'express';\n\nconst router: Router = express.Router();\n\nrouter.all('/*', (req: $Request, res: $Response) => {\n  res.status(404).json({\n    status: 404,\n    error: 'not a valid endpoint',\n  });\n});\n\nexport default router;\n","import braintree from 'braintree';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nconst gateway = braintree.connect({\n  environment: braintree.Environment.Sandbox,\n  merchantId: process.env.BRAINTREE_MERCHANT_ID,\n  publicKey: process.env.BRAINTREE_PUBLIC_KEY,\n  privateKey: process.env.BRAINTREE_PRIVATE_KEY,\n});\n\nexport default gateway;\n","/** @flow */\nimport gateway from './gateway';\n// types\nimport type { Router, $Request, $Response } from 'express';\nimport type { Transaction } from 'checkout';\n\nconst checkout = async (req: $Request, res: $Response) => {\n  const {\n    paymentMethodNonce,\n    amount,\n    billing,\n    shipping,\n    customer,\n    lineItems,\n    orderId,\n  } = req.body;\n\n  try {\n    // const customer = await gateway.customer;\n    const result = await gateway.transaction.sale({\n      amount,\n      paymentMethodNonce,\n      billing,\n      shipping,\n      customer,\n      lineItems,\n      orderId,\n      options: {\n        submitForSettlement: true,\n      },\n    });\n\n    res.status(200).json({\n      result,\n    });\n  } catch (e) {\n    console.log(e);\n    res.status(404).json({\n      status: 404,\n      error: e,\n    });\n  }\n};\n\nexport default checkout;\n","/** @flow */\nimport gateway from './gateway';\n// types\nimport type { Router, $Request, $Response } from 'express';\nimport type { Transaction } from 'checkout';\n\nconst clientToken = async (req: $Request, res: $Response) => {\n  try {\n    const clientToken = await gateway.clientToken.generate({});\n    res.status(200).json({\n      status: 200,\n      ...clientToken,\n    });\n  } catch (e) {\n    res.status(404).json({\n      status: 404,\n      message: e,\n    });\n  }\n};\n\nexport default clientToken;\n","/** @flow */\nimport express from 'express';\nimport gateway from './gateway';\nimport checkout from './checkout';\nimport token from './client-token';\n// types\nimport type { Router, $Request, $Response } from 'express';\n// initialize router\nconst router: Router = express.Router();\n\nrouter.get('/client_token', token);\nrouter.post('/checkout', checkout);\n\nexport default router;\n","// @flow\nimport fallback from './fallback';\nimport braintree from './braintree/routes';\n// import address from './address/routes';\n// types\nimport type { Router } from 'express';\n\n/**\n * All of the routes in order as an array. !IMPORTANT in order...\n * Express will map through these and apply them with app.use()\n * @type {array}\n */\nconst routes: Array<Router> = [braintree, fallback];\n\nexport default routes;\n","// @flow\nimport cors from 'cors';\n\nconst origins = ['https://artetexture.netlify.com'];\n\nconst corsMiddleware = cors({\n  origin: origins,\n  methods: 'POST, GET',\n  allowedHeaders: ['Content-Type', 'Authorization'],\n});\n\nexport default corsMiddleware;\n","// @flow\nimport bodyParser from 'body-parser';\n\nconst urlEncoded = bodyParser.urlencoded({ extended: false });\nconst json = bodyParser.json();\n\nexport default [urlEncoded, json];\n","// @flow\nimport type { $Request, $Response, NextFunction } from 'express';\n\nconst requestAPIKey = process.env.REQUEST_API_KEY;\n\nconst auth = (req: $Request, res: $Response, next: NextFunction) => {\n  const key: string = req.get('Authorization');\n\n  if (key === requestAPIKey) next();\n  else\n    res.status(401).json({\n      status: 401,\n      error: 'not authorized',\n    });\n};\n\nexport default auth;\n","// @flow\nimport type { $Request, $Response, NextFunction } from 'express';\n\nfunction secure(req: $Request, res: $Response, next: NextFunction) {\n  const isSecure = req.protocol;\n\n  if (isSecure) next();\n  else\n    res.status(401).json({\n      status: 401,\n      error: 'only secure origins are allowed',\n    });\n}\n\nexport default secure;\n","// @flow\nimport type { $Request, $Response, NextFunction } from 'express';\n\nfunction responseHeaders(req: $Request, res: $Response, next: NextFunction) {\n  res.header({\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Credentials': true,\n  });\n\n  next();\n}\n\nexport default responseHeaders;\n","// @flow\nimport cors from './cors';\nimport body from './body-parser';\nimport auth from './auth';\nimport secure from './secure';\nimport responseHeaders from './response-headers';\n\nimport type { Middleware } from 'express';\n\n/** export for testing */\nexport { default as body } from './body-parser';\nexport { default as cors } from './cors';\nexport { default as auth } from './auth';\nexport { default as secure } from './secure';\nexport { default as responseHeaders } from './response-headers';\n\n/**\n * All of the middleware in order. !IMPORTANT in order.\n * Express will map through and apply these with app.use();\n * @type {array}\n */\nconst middleware: Array<Middleware> = [\n  cors,\n  ...body,\n  auth,\n  secure,\n  responseHeaders,\n];\n\nexport default middleware;\n","// @flow\nimport express from 'express';\nimport serverless from 'serverless-http';\n// routes and middleware\nimport routes from './routes';\nimport middleware from './middleware';\n// initialize app\nconst app = express();\n// apply all middleware\nmiddleware.forEach((middlware) => app.use(middlware));\n// apply all top level routes\nroutes.forEach((router) => app.use('/', router));\n// export final route like this instead of using export for serverless\nmodule.exports.handler = serverless(app);\n"],"names":["router","express","Router","all","req","res","status","json","error","dotenv","config","gateway","braintree","connect","environment","Environment","Sandbox","merchantId","process","env","BRAINTREE_MERCHANT_ID","publicKey","BRAINTREE_PUBLIC_KEY","privateKey","BRAINTREE_PRIVATE_KEY","checkout","paymentMethodNonce","amount","billing","shipping","customer","lineItems","orderId","body","result","transaction","sale","options","submitForSettlement","e","console","log","clientToken","generate","message","get","token","post","routes","fallback","origins","corsMiddleware","cors","origin","methods","allowedHeaders","urlEncoded","bodyParser","urlencoded","extended","requestAPIKey","REQUEST_API_KEY","auth","next","key","secure","isSecure","protocol","responseHeaders","header","middleware","app","forEach","middlware","use","module","exports","handler","serverless"],"mappings":"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"}